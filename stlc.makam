term : type.
typ : type.

tbool : typ.

app : term -> term -> term.
arrow : typ -> typ -> typ.

lam : typ -> (term -> term) -> term.

typeof : term -> typ -> prop.

typeof (app E1 E2) T' :- typeof E1 (arrow T T'), typeof E2 T.

typeof (lam T1 E) (arrow T1 T2) :-
    (x:term -> typeof x T1 -> typeof (E x) T2).

eval : term -> term -> prop.
eval (lam T F) (lam T F).
eval (app E E') V'' :- eval E (lam _ F), eval E' V', eval (F V') V''.

%open syntax.
styp, styp_base : syntax typ.
sterm, sterm_base : syntax term.
sterm_concrete : syntax (concrete term).

termvars: concrete.namespace term.
concrete.pick_namespace_userdef (_: term) termvars.

tint : typ.

% longform syntax is here:
%  fun t1 => fun t2 => app t1 t2 { "@" <sterm> <sterm> }

`( syntax_rules {{

styp -> arrow { <styp_base> "->" <styp> }
      / { <styp_base> }

styp_base -> tint { "int" }
      / { "(" <styp> ")" }

sterm -> app { <sterm_base> <sterm> }
       / { <sterm_base> }

sterm_base ->
         fun x => concrete.var (concrete.name termvars x) { <makam.ident> }
       / fun id => fun tp => fun tm => lam tp (concrete.lambda (concrete.name termvars id) tm) { "λ" <makam.ident> ":" <styp> "." <sterm> }
       / { "(" <sterm> ")" }

sterm_concrete -> concrete { <sterm> }

}} ).

`( syntax.def_toplevel_js sterm_concrete ).
`( syntax.def_toplevel_js styp ).

tests : testsuite. %testsuite tests.

(isocast {{ λx: int.x }} (E: term), typeof E T) ?
>> Yes:
>> E := lam tint (fun x => x),
>> T := arrow tint tint.

isocast (arrow tint tint) (X: string) ?
>> Yes:
>> X := "int -> int ".

%  typeof (lam _ (fun x => x)) T ?
%  >> Yes:
%  >> T := arrow T2 T2

%  typeof (lam _ (fun x => app x x)) T' ?
%  >> Impossible.

% Booleans
% ===========
% true
%  typeof (lam _ (fun t => (lam _ (fun f => t)))) T ?
%  Yes:
%  T := arrow _19 (arrow _18 _19).

% false
%  typeof (lam _ (fun t => (lam _ (fun f => f)))) T ?
%  Yes:
%  T := arrow _19 (arrow _18 _19).

% if
