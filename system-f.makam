term : type.

lam : typ -> (term -> term) -> term.
app : term -> term -> term.

typ : type.
arrow : typ -> typ -> typ.

typeabs : (typ -> term) -> term.
typeapp : term -> typ -> term.
pi : (typ -> typ) -> typ.

typeof : term -> typ -> prop.

typeof (app E1 E2) T' :- typeof E1 (arrow T T'), typeof E2 T.

typeof (lam T1 E) (arrow T1 T2) :-
    (x:term -> typeof x T1 -> typeof (E x) T2).

typeof (typeabs EF) (pi TF) :-
    (x : typ -> typeof (EF x) (TF x)).

eval : term -> term -> prop.
eval (lam T F) (lam T F).
eval (app E E') V'' :- eval E (lam _ F), eval E' V', eval (F V') V''.

%  typeof (lam _ (fun x => x)) T ?
%  >> Yes:
%  >> T := arrow T2 T2

%  typeof (lam _ (fun x => app x x)) T' ?
%  >> Impossible.

% Booleans
% ===========
% true
%  typeof (lam _ (fun t => (lam _ (fun f => t)))) T ?
%  Yes:
%  T := arrow _19 (arrow _18 _19).

% false
%  typeof (lam _ (fun t => (lam _ (fun f => f)))) T ?
%  Yes:
%  T := arrow _19 (arrow _18 _19).

% if
